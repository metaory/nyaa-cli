#!/usr/bin/env bash
set -euo pipefail
set -E

log() {
    local level="${1:-info}"
    shift
    local color=""
    case "$level" in
    error) color="\033[1;31m" ;;   # red
    warn) color="\033[1;33m" ;;    # yellow
    info) color="\033[1;34m" ;;    # blue
    success) color="\033[1;32m" ;; # green
    hint) color="\033[1;36m" ;;    # cyan
    *) color="" ;;
    esac
    printf '[nyaa-cli][%s][%b%s%b] %s\n' "$(date '+%H:%M:%S')" "$color" "$level" "\033[0m" "$*" >&2
}

# ───────────────[ DEFAULTS ]
BASE_URL="https://nyaa.si"
QUALITY="720"
CAT="1_2"
PAGE=1
FROM=
TO=
NAME=
EP=
UPLOADER=
TMP=./dev
# TMP=$(mktemp -d)

# ───────────────[ TRAP ]
function on_error {
    local exit_code=$?
    local line_no=$1
    local cmd=$2
    log error "ERROR at line $line_no: $cmd (exit $exit_code)"
}

function cleanup {
    log info "Cleaning up..."
    # rm -rf "$TMP"
}

trap 'on_error $LINENO "$BASH_COMMAND"' ERR
trap cleanup EXIT
trap 'log warn "Interrupted"; cleanup; exit 1' INT

# ───────────────[ OPTIONS ]
usage() {
    cat <<EOF
nyaa-cli :: Download episodes in bulk from nyaa.si

Usage:
  nyaa-cli --name "one piece" --ep 120
  nyaa-cli --name "one piece" --from 120 [--to 130]
  nyaa-cli --name "one piece" --ep 120 --uploader "Erai"
  nyaa-cli --name "one piece" --from 120 --quality "720"

Options:
  --name      Anime name (required)
  --ep        Episode number (exclusive with --from)
  --from      Starting episode (exclusive with --ep)
  --to        Ending episode (optional, with --from)
  --quality   Video quality (default: 720)
  --uploader  Uploader filter (e.g. Erai, SubsPlease)

Notes:
  --from and --ep can't be used together.
  --from without --to downloads all episodes from start.
  Not specifying --uploader picks highest seeder.

EOF
}

while [[ $# -gt 0 ]]; do
    case "$1" in
    --help | -h)
        usage
        exit 0
        ;;
    --ep)
        EP="$2"
        shift 2
        ;;
    --from)
        FROM="$2"
        shift 2
        ;;
    --to)
        TO="$2"
        shift 2
        ;;
    --quality)
        QUALITY="$2"
        shift 2
        ;;
    --name)
        NAME="${2// /+}"
        shift 2
        ;;
    --uploader)
        UPLOADER="$2"
        shift 2
        ;;
    *)
        log error "unknown arg: $1"
        usage
        exit 1
        ;;
    esac
done

# ───────────────[ ASSERTS ]
# Ensure Bash 5.0+ is installed
if [ -z "$BASH_VERSION" ] || [ "${BASH_VERSINFO[0]}" -lt 5 ]; then
    log error "❌ Bash 5.0+ required. On macOS, install with Homebrew: brew install bash"
    log error "Then run: /opt/homebrew/bin/bash ./nyaa-cli ..."
    exit 127
fi

# Ensure --name is provided
if [[ -z "$NAME" ]]; then
    log error "--name is required"
    usage
    exit 1
fi
# Ensure either --from or --ep is present, but not both
if [[ -n "$FROM" && -n "$EP" ]]; then
    log error "--from and --ep cannot be used together"
    usage
    exit 1
fi
if [[ -z "$FROM" && -z "$EP" ]]; then
    log error "Either --from or --ep is required"
    usage
    exit 1
fi
# --to can only be present if --from is present
if [[ -n "$TO" && -z "$FROM" ]]; then
    log error "--to can only be used with --from"
    usage
    exit 1
fi

# ───────────────[ REQUIREMENTS ]
command -v pup >/dev/null 2>&1 || {
    log info "installing pup..."
    command -v go >/dev/null 2>&1 || {
        log error 'Go not found. Please install Go.'
        exit 1
    }
    go install github.com/ericchiang/pup@latest
    sudo mv ~/go/bin/pup /usr/local/bin/
}

for cmd in jq curl pup; do
    command -v "$cmd" >/dev/null || {
        log error "missing: $cmd"
        exit 127
    }
done

# ───────────────[ CORE ]
function get_episodes {
    local ep="$1"
    local url="${BASE_URL}/?c=${CAT}&s=seeders&o=desc&p=${PAGE}&q=${QUALITY}+${UPLOADER}+${NAME}+${ep}"
    log info "Fetching: $url"
    curl -s "${url}" |
        pup 'tr.success json{}' |
        jq '[.[] | {
            name: .children[1].children[0].title, 
            size: .children[3].text, 
            date: .children[4].text, 
            seeds: .children[5].text, 
            torrent_url: .children[2].children[0].href
        }]'
}

# ───────────────[ ACCUMULATE ]
declare -A list
function accumulate_episodes {
    local ep="$1"
    log info "Searching for episode $ep..."
    local results
    results=$(get_episodes "$ep")
    local count
    count=$(echo "$results" | jq 'length')
    if [[ "$count" -eq 0 ]]; then
        log warn "No result for episode $ep, stopping."
        return
    fi
    local top
    top=$(echo "$results" | jq '.[0]')
    local torrent_url
    torrent_url=$(echo "$top" | jq -r '.torrent_url')
    list[$ep]="$torrent_url"
    log info "Found episode $ep: $torrent_url"
    if [[ -n "$TO" && $ep -ge $TO ]]; then
        log info "Reached TO=$TO, stopping."
        return
    fi
    accumulate_episodes $((ep + 1))
}

# ───────────────[ INFO ]
logheader() {
    printf '\n\033[1;36m╭─[ SETUP ]────────────────╴───╶╴──╶╴╴\033[0m\n'
    for var; do
        printf '\033[1;36m│\033[0m %-12s : \033[1m%s\033[0m\n' "$var" "${!var}"
    done
    printf '\033[1;36m╰─────────────────────────────────╴─╴─╴╴╴╴\033[0m\n'
}

logheader QUALITY UPLOADER NAME EP FROM TO TMP

# ───────────────[ DRIVER ]
if [[ -n "$FROM" ]]; then
    log info "Starting batch download from episode $FROM${TO:+ to $TO}..."
    accumulate_episodes "$FROM"
    for ep in "${!list[@]}"; do
        echo "$ep: ${list[$ep]}"
    done
    log info "Batch download complete."
    exit 0
fi
