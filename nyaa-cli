#!/usr/bin/env bash
# shellcheck disable=SC2154
set -euo pipefail
set -o errtrace

# v1.2

# ───────────────[ COLORS ]
for i in {0..7}; do
  printf -v "c$i" '\033[3%sm' "$i"
  printf -v "C$i" '\033[1;3%sm' "$i"
done

# ───────────────[ DEFAULTS ]
BASE_URL="https://nyaa.si"
QUALITY="720"
CAT="1_2"
FROM=
TO=
NAME=
UPLOADER=
OUTPUT="output"

# ───────────────[ STATE ]
SMART_MODE=""
OVERRIDES=""

# ───────────────[ LOG ]
function log {
  local level="${1:-info}"
  shift
  local color=""
  local prefix=""
  case "$level" in
  error)
    color="$C1"
    prefix="❌"
    ;;
  warn)
    color="$C3"
    prefix="️🔻"
    ;;
  info)
    color="$C4"
    prefix="️️🔘"
    ;;
  success)
    color="$C2"
    prefix="🔹"
    ;;
  episode)
    color="$C5"
    prefix="🔰"
    ;;
  fetch)
    color="$C3"
    prefix="🔸"
    ;;
  *)
    color=""
    prefix=""
    ;;
  esac
  printf '%b%s %s%b\n' "$color" "$prefix" "$@" "$c0" >&2
}

function highlight {
  printf '%b%s%b' "$C7" "$1" "$c0"
}

# ───────────────[ ERROR HANDLING ]
function on_error {
  local exit_code=$?
  local line_no=$1
  local cmd=$2
  log error "ERROR at line $line_no: $cmd (exit $exit_code)"
  exit "$exit_code"
}

trap 'on_error $LINENO "$BASH_COMMAND"' ERR
trap 'log warn "Interrupted"; exit 1' INT

# ───────────────[ STATE ]
STATE_DIR="$HOME/.local/state/nyaa-cli"
STATE_FILE="$STATE_DIR/progress"

mkdir -p "$STATE_DIR" &>/dev/null
touch "$STATE_FILE"

function get_last_episode {
  local name="$1"
  grep "^$name" "$STATE_FILE" | cut -f2 || true
}

function get_stored_param {
  local name="$1"
  local param="$2"
  grep "^$name" "$STATE_FILE" 2>/dev/null | cut -f3- | tr '\t' '\n' | grep "^$param:" | cut -d: -f2- || true
}

function has_override { [[ "$OVERRIDES" == *"$1"* ]]; }

function load_stored_params {
  local name="$1"
  has_override "quality" || QUALITY=$(get_stored_param "$name" "quality" || echo "720")
  has_override "uploader" || UPLOADER=$(get_stored_param "$name" "uploader")
}

function update_state {
  local name="$1" episode="$2" params=""

  # Store only quality and uploader preferences
  params="$params\tquality:$QUALITY"
  [[ -n "$UPLOADER" ]] && params="$params\tuploader:$UPLOADER"

  awk -v name="$name" -v ep="$episode" -v params="$params" '
    $1 == name { next }
    { print }
    END { printf "%s\t%s%s\n", name, ep, params }
  ' "$STATE_FILE" >"$STATE_FILE.new" && mv "$STATE_FILE.new" "$STATE_FILE"
}

# ───────────────[ CORE ]
function get_episodes {
  local ep="$1"
  ep=$(printf "%02d" "$ep")
  local url="${BASE_URL}/?c=${CAT}&s=seeders&o=desc&q=${QUALITY}+${UPLOADER}+${NAME}+${ep}"
  curl -s "${url}" |
    pup 'tr.success json{}' |
    jq '[.[] | {
            name: .children[1].children[0].title,
            size: .children[3].text,
            date: .children[4].text,
            seeds: .children[5].text,
            torrent_url: .children[2].children[0].href
        }]'
}

# ───────────────[ DOWNLOAD ]
function normalize_filename {
  tr '[:upper:]' '[:lower:]' <<<"$1" | tr ' ' '-' | sed 's/[^a-z0-9-]//g'
}

function download_torrent {
  local url="${BASE_URL}/${1}"
  local name="$2"
  local ep="$3"

  local filename
  filename="$(normalize_filename "${name}")_${ep}.torrent"
  local output_path="${OUTPUT}/${filename}"

  [[ -e "$output_path" ]] && log warn "Overwriting existing file: $output_path"

  log fetch "Downloading episode $ep..."
  if curl -sL "$url" -o "${output_path}"; then
    log success "Saved: $(highlight "$output_path")"
    update_state "$NAME" "$ep"
    return 0
  else
    log error "Failed to download episode $ep"
    rm -f "$output_path"
    return 1
  fi
}

# ───────────────[ ACCUMULATE ]
function accumulate_episodes {
  local ep="$1"
  log episode "Searching for Episode $(highlight "$ep")"
  local results
  results=$(get_episodes "$ep")
  local count
  count=$(echo "$results" | jq 'length')
  if [[ "$count" -eq 0 ]]; then
    log warn "No results found for episode $ep"
    return
  fi
  local top
  top=$(echo "$results" | jq '.[0]')
  local torrent_url
  torrent_url=$(echo "$top" | jq -r '.torrent_url')
  local episode_name
  episode_name=$(echo "$top" | jq -r '.name')
  log success "Found: $(highlight "$episode_name")"

  download_torrent "$torrent_url" "$NAME" "$ep"

  if [[ -n "$TO" && $ep -ge $TO ]]; then
    echo '  --------------'
    log info "Reached target episode $TO"
    return
  fi
  printf '\n' >&2
  accumulate_episodes $((ep + 1))
}

# ───────────────[ CLI ]
function usage {
  cat <<EOF

${C6}nyaa-cli${c0} :: ${C3}Smart anime torrent fetcher with stateful episode tracking${c0}

${C5}Usage:${c0}
  ${C2}nyaa-cli                                   ${C4}# Smart mode: update all anime
  ${C2}nyaa-cli${c0} ${C3}-q 480                            ${C4}# Smart mode with quality override
  ${C2}nyaa-cli${c0} ${C3}-n "one piece" -e 120             ${C4}# Normal mode: specific episode
  ${C2}nyaa-cli${c0} ${C3}-n "one piece" -f 120 [-t 130]    ${C4}# Normal mode: episode range

${C5}Options:${c0}
  ${C2}-n, --name${c4}      Anime name (omit for smart mode)
  ${C2}-e, --episode${c4}   Download a single episode
  ${C2}-f, --from${c4}      Starting episode (exclusive with -e)
  ${C2}-t, --to${c4}        Ending episode (optional, with -f)
  ${C2}-q, --quality${c4}   Video quality (default: ${C3}720${c0})
  ${C2}-u, --uploader${c4}  Uploader filter (e.g. ${C3}Erai${c0}, ${C3}SubsPlease${c0})
  ${C2}-o, --output${c4}    Output directory (default: ${C3}./output${c0})
  ${C2}-h, --help${c4}      Show this help message

${C5}Smart Mode:${c4}
  • Omit ${C2}--name${c4} to process all anime from state file
  • Uses stored preferences per anime (quality, uploader, output)
  • CLI options override stored preferences for this run
  • ${C2}nyaa-cli --quality 1080${c4} updates all anime with 1080p override

${C5}Notes:${c4}
  • ${C2}-f${c4} and ${C2}-e${c4} cannot be used together
  • ${C2}-f${c4} without ${C2}-t${c4} downloads all episodes from start
  • Not specifying ${C2}-u${c4} picks highest seeder

EOF
}

# ───────────────[ VALIDATION ]
function is_numeric {
  [[ "$1" =~ ^[0-9]+$ ]]
}

function validate_numeric {
  local arg="$1"
  local value="$2"
  if ! is_numeric "$value"; then
    log error "$arg must be a number"
    exit 1
  fi
}

function parse_args {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --help | -h)
      usage
      exit 0
      ;;
    --episode | -e)
      validate_numeric "--episode" "$2"
      FROM="$2"
      TO="$2"
      shift 2
      ;;
    --from | -f)
      validate_numeric "--from" "$2"
      FROM="$2"
      shift 2
      ;;
    --to | -t)
      validate_numeric "--to" "$2"
      TO="$2"
      shift 2
      ;;
    --quality | -q)
      QUALITY="$2"
      OVERRIDES="$OVERRIDES quality"
      shift 2
      ;;
    --name | -n)
      NAME="${2// /+}"
      NAME="${NAME,,}"
      shift 2
      ;;
    --uploader | -u)
      UPLOADER="$2"
      OVERRIDES="$OVERRIDES uploader"
      shift 2
      ;;
    --output | -o)
      OUTPUT="$2"
      shift 2
      ;;
    *)
      log error "unknown arg: $1"
      usage
      exit 1
      ;;
    esac
  done
}

parse_args "$@"

# ───────────────[ VALIDATION ]
# Ensure Bash 5.0+ is installed
if [ -z "$BASH_VERSION" ] || [ "${BASH_VERSINFO[0]}" -lt 5 ]; then
  log error "❌ Bash 5.0+ required. On macOS, install with Homebrew: brew install bash"
  log error "Then run: /opt/homebrew/bin/bash ./nyaa-cli ..."
  exit 127
fi

function detect_mode {
  [[ -z "$NAME" ]] && SMART_MODE="true"
}

function validate_normal_mode {
  [[ -n "$SMART_MODE" ]] && return

  if [[ -n "$TO" && -z "$FROM" ]]; then
    log error "--to can only be used with --from"
    usage
    exit 1
  fi

  if [[ -n "$TO" && -n "$FROM" && "$TO" -lt "$FROM" ]]; then
    log error "--to ($TO) must be greater than --from ($FROM)"
    usage
    exit 1
  fi

  # Load stored parameters for this anime (respects CLI overrides)
  load_stored_params "$NAME"

  if [[ -z "$FROM" ]]; then
    local last_ep
    last_ep=$(get_last_episode "$NAME")
    if [[ -z "$last_ep" ]]; then
      log info "No previous episodes found for $NAME, starting from episode 1"
      FROM=1
    else
      log info "Found last episode $last_ep for $NAME in state file"
      FROM=$((last_ep + 1))
    fi
  fi
}

detect_mode || true
validate_normal_mode

# ───────────────[ REQUIREMENTS ]
command -v pup >/dev/null 2>&1 || {
  log info "installing pup..."
  command -v go >/dev/null 2>&1 || {
    log error 'Go not found. Please install Go.'
    exit 1
  }
  go install github.com/ericchiang/pup@latest
  sudo mv ~/go/bin/pup /usr/local/bin/
}

for cmd in jq curl pup; do
  command -v "$cmd" >/dev/null || {
    log error "missing: $cmd"
    exit 127
  }
done

# ───────────────[ SMART MODE ]
function smart_mode_execute {
  [[ ! -s "$STATE_FILE" ]] && {
    log info "No anime to process"
    return
  }

  local processed=0 orig_quality="$QUALITY" orig_uploader="$UPLOADER"

  while IFS=$'\t' read -r name episode rest; do
    [[ -z "$name" ]] && continue

    log info "Processing $(highlight "$name") from episode $((episode + 1))"

    QUALITY="$orig_quality" UPLOADER="$orig_uploader"
    load_stored_params "$name"

    NAME="$name" FROM=$((episode + 1)) TO=""
    mkdir -p "$OUTPUT" &>/dev/null

    accumulate_episodes "$FROM" && ((processed++))
    printf '\n' >&2
  done <"$STATE_FILE"

  log success "Smart mode completed: $processed anime processed"
}

# ───────────────[ UI ]
function logheader {
  printf '\n\033[1;36m╭─[ %s ]────────────────╴───╶╴──╶╴╴\033[0m\n' "NYAA CLI"
  for var; do
    local value="${!var}"
    local label="${var,,}"
    label="${label^}"
    printf '\033[1;36m│\033[0m \033[1;97m%-12s\033[0m: \033[1;33m%s\033[0m\n' "$label" "$value"
  done
  printf '\033[1;36m╰─────────────────────────────────╴─╴─╴╴╴╴\033[0m\n\n'
}

function process_normal_mode {
  logheader QUALITY UPLOADER NAME FROM TO OUTPUT
  mkdir -p "$OUTPUT" &>/dev/null
  log info "Starting download from episode $(highlight "$FROM")${TO:+ to $(highlight "$TO")}"
  printf '\n' >&2
  accumulate_episodes "$FROM"
}

function process_smart_mode {
  log info "Smart mode: processing all anime${OVERRIDES:+ with overrides: $OVERRIDES}"
  smart_mode_execute
}

# ───────────────[ DRIVER ]
[[ -n "$SMART_MODE" ]] && process_smart_mode || process_normal_mode
